package pin.safenet;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream; 
import java.net.Socket;
import org.apache.commons.codec.binary.Hex;
//import org.json.JSONException;
import org.json.JSONObject;
import org.springframework.jdbc.core.JdbcTemplate; 
import com.ifp.Action.BaseAction; 
import com.ifp.instant.HSMParameter;
import com.ifp.util.CommonDesc;
 


public class HsmTcpIp extends BaseAction{ 
	 
	
	public Socket ConnectingHSM(String IPaddress,int port,int hsmTimeout){
		Socket  socket=null;
		try {
			socket = new Socket(IPaddress,port);
			trace("Result from socket----> "+socket);
		}
		catch (Exception e)		{
			trace(" connection is 2  " + socket );
			trace("Socket Creation Excetiopjk-=========> "+e.getMessage());
			return socket;
		} 
		trace(" Socket Is Returns is ======####====> "+socket);
		return socket;
	}
	
	
	public String sendToHSMForPrintPin( ByteArrayOutputStream message, EHsm ehsm, DataOutputStream out, DataInputStream in    ) throws Exception{
		
		
		trace("Message : " + message + ":  out " + out + " : in " + in );
		trace("Got ByteArrayoutputstream... " + new String ( Hex.encodeHex( message.toByteArray() )  ) );
		
		ByteArrayOutputStream hsmmsg = new ByteArrayOutputStream(); 
	 
		trace("SOH Writing...");
		hsmmsg.write(  EHsm.ascii_to_bcd("01", 1) ); // #OH
		
		trace("Sequence Number Writing...");
		hsmmsg.write(  EHsm.ascii_to_bcd("01", 1) ); //Sequence Number
		String HsmHeader = "0001"; //hsm header
		
		
		hsmmsg.write(  EHsm.ascii_to_bcd(HsmHeader, 2) );
		hsmmsg.write(  EHsm.ascii_to_bcd("00", 1) );
		
		String msglen = hexa(  message.size() );
		trace("Message lenght is [ " +message.size()+ " ] and hexa value is " + msglen ); 
		
		hsmmsg.write(    EHsm.ascii_to_bcd( msglen , msglen.length()/2 )  );
		hsmmsg.write( message.toByteArray() );
		
		trace("----request begin Original------");
		trace( new String ( Hex.encodeHex( hsmmsg.toByteArray() ) ) );
		trace("----request end Original------"); 
		  
		 //hsmmsg= new String("010100010017ee0e0608020002010463767620000600001360718999000000");
		
		trace("----request begin------");
		trace( new String ( Hex.encodeHex( hsmmsg.toByteArray() ) ) );
		trace("----request end ------"); 
		
		
		//out.write(010100010017ee0e0608020002010463767620000600001360718999000000);
		
		
		out.write( hsmmsg.toByteArray() );
		
		out.flush();
		
		byte[] msgheader = new byte[6];
		
		
				
		in.read(msgheader);
		
		trace("----response begin ------");
		trace( "msgheader :" + new String ( Hex.encodeHex( msgheader )  ) );
		String headerdata =  new String ( Hex.encodeHex( msgheader )  );
		String headerlength = headerdata.substring(headerdata.length()-4, headerdata.length() ) ; 
		int headerlen = Integer.parseInt(headerlength, 16);   
		byte[] response = new byte[headerlen];
		in.read(response);	 
		trace( "message :" + new String ( Hex.encodeHex( response )  ) );
		trace("----response end------"); 
		return new String ( Hex.encodeHex( response )  );
	}
	
	
	public   Socket connectingHSM(String IPaddress,int port,int hsmTimeout) throws Exception {
		Socket  socket=null;
		try {
			socket = new Socket(IPaddress,port);
			trace("Result from socket----> "+socket);
		} catch (Exception e) {
			trace(" connection is 2  " + socket );
			trace("Socket Creation Excetiopjk-=========> "+e.getMessage());
			return socket;
		}
		
		trace(" Socket Is Returns is ======####====> "+socket);
		return socket;
	}
	
	
	public JSONObject decomposeKeys( String command, String data, JSONObject jsonresp ) {
		//ee0400  00  01  10 1315cf2ec2c570bf057fc4a28c94c8fe   11 11 0af763b8fdf927f387fcc9d8074ed3af6a  3516
		String respmsg = ""; 
		if ( data == null || data.length() <= 0 ){
			jsonresp.put("RESPCODE", 1);
			jsonresp.put("REASON", "Message Not Received from HSM" );
			return jsonresp;
		} 
	    String[] resp1 = data.toUpperCase().split(command);//EE0E06
	    
		String responsecode = resp1[1].substring(0, 2);
		if( responsecode.trim().equals("00")){
			String keycount = resp1[1].substring(0, 2);			 
		 	trace("data : " + data.substring(data.length()-4, data.length()) ); 
		 	trace("commond : " + data.substring(0, 6));
		 	trace("resp : " + data.substring(6, 8));
		 	trace("keycount : " + data.substring(8, 10));
		 	trace("keylength : " + Integer.parseInt(data.substring(10, 12) , 16) );
			int keylen = Integer.parseInt(data.substring(10, 12) , 16) ;
			int keyendposition = 12+(keylen*2);
			String SESSIONKEY_TMK = data.substring(12, keyendposition );
			trace("SESSIONKEY_LMK: " + SESSIONKEY_TMK  );
			jsonresp.put("SESSIONKEY_TMK", SESSIONKEY_TMK );
			int index1pos = keyendposition+2;
			trace("index 1 : " + data.substring(keyendposition, index1pos ));
			int index2pos = index1pos+2;
			trace("index 1 : " + data.substring(index1pos, index2pos ));
			int key2endpos  = index2pos+(keylen*2);
			
			String SESSIONKEY_LMK = data.substring(index2pos, key2endpos );
			trace("SESSIONKEY_LMK : " + SESSIONKEY_LMK );
			jsonresp.put("SESSIONKEY_LMK", SESSIONKEY_LMK );
			
			int checkdigitpos  = key2endpos+6;
			trace("checkdigit : " + data.substring(key2endpos, checkdigitpos ));	
			
			jsonresp.put("RESPCODE", 0);
			
		}else{
			jsonresp.put("RESPCODE", 1);
			respmsg  = this.getHSMResponse(responsecode);
			jsonresp.put("REASON", "Message Not Received from HSM" );
		}
		
		return jsonresp;
		
	}
	
	public String deComposePinMailer( String command, String msg ) {
		if ( msg.length() <= 0 ){
			return "Message Not Received from HSM" ;
		} 
		String pinoffset = "";
	    String[] resp1 = msg.toUpperCase().split(command);//EE0E06
	    
		String responsecode = resp1[1].substring(0, 2);
		
		trace("Command : " + resp1[1] );
		
		trace("responsecode : " + responsecode );
		String respmsg = this.getHSMResponse(responsecode);
		if( respmsg.equals("00") ){
			pinoffset = resp1[1].substring(2,6)+"~0";
		}else{
			pinoffset = respmsg+"~1";  
		}
		return pinoffset;
	}
	
	
	public String getHSMResponse(String responsecode ){
		String respmsg = responsecode;
		if( responsecode.trim().equals("00")){
			respmsg = "00" ; 
		}else if( responsecode.trim().equals("01")){
			respmsg = "DES_FAULT";
		}else if( responsecode.trim().equals("02")){
			respmsg = "PIN MAILER NOT ENABLED";
		}else if( responsecode.trim().equals("03")){
			respmsg = "INCORRECT MESSAGE LENGTH";
		}else if( responsecode.trim().equals("04")){
			respmsg = "INVALID DATA IN MESSAGE";
		}else if( responsecode.trim().equals("05")){
			respmsg = "INVALID_PIN_FORMAT_SPECIFIER";
		}else if( responsecode.trim().equals("06")){
			respmsg = "PIN_FORMAT_ERROR";
		}else if( responsecode.trim().equals("07")){
			respmsg = "VERIFICATION FAILURE";
		}else if( responsecode.trim().equals("08")){
			respmsg = "DES_FAULT";
		}else if( responsecode.trim().equals("09")){
			respmsg = "CONTENTS OF KEY MEMORY DESTROYED";
		}else if( responsecode.trim().equals("21")){
			respmsg = "Unsupported key specifier";
		}else if( responsecode.trim().equals("22")){
			respmsg = "Invalid key specifier content";
		}else if( responsecode.trim().equals("23")){
			respmsg = "Invalid key specifier formatr";
		}else if( responsecode.trim().equals("21")){
			respmsg = "Unsupported key specifier";
		}else if( responsecode.trim().equals("90")){
			respmsg = "GENERAL PRINTER ERROR";
		}  
		
		trace("respreason : " + respmsg );
		return respmsg;
	}
	 
	public String printPin( String instid, String cardno,String dcardno, String cin, String productcode,  String bin, String gentype, DataInputStream in, DataOutputStream out, JdbcTemplate jdbctemplate , HSMParameter hsmobj ) throws Exception {
		
		String offsetresp = null;
		CommonDesc commondesc = new CommonDesc();  
		String pinmailerid = hsmobj.PINMAILER_ID;
		String pvkvalue  = hsmobj.PVK;
		String hsmid  = hsmobj.HSM_ID;
		trace("Hsm id ["+hsmid+"] PVK ["+pvkvalue+"] PINMAILERID ["+pinmailerid+"]" +"dcardno:::"+dcardno); 
		trace("=================================================================="); 
		ByteArrayOutputStream outputStream = new ByteArrayOutputStream( );
		//String similuatorcommand = "EE0604";
		String hsmcommand = "EE0E06";  
		//String hsmcommand = "EE0802";  
		String command = hsmcommand;
		try{  
			trace("Getting product code ..got : " + productcode );
			String subproduct = commondesc.getSubProductByCHNProcess(instid, cardno, gentype, jdbctemplate) ;
			trace("Getting sub-product code ..got : " + subproduct );
			
			String orderrefno = commondesc.getOrderrefno(instid, cardno, gentype, jdbctemplate) ;
			trace("Getting sub-product code ..got : " + orderrefno );
			
			
			trace("Getting pinmailer ..got : " + pinmailerid  );		
			EHsm ehsm = new EHsm();   
			
			ByteArrayOutputStream pinRequestBuffer = ehsm.ComposePINMailer(instid,command,pvkvalue,dcardno, cin, productcode, subproduct, gentype,orderrefno,jdbctemplate, commondesc, outputStream, hsmobj);
			
			trace("Send to hsm...."+pinRequestBuffer);  
			trace( new String ( Hex.encodeHex( pinRequestBuffer.toByteArray() ) ) );
			String response = sendToHSMForPrintPin(pinRequestBuffer, ehsm, out, in);
			trace("got final response : " + response );
			offsetresp = deComposePinMailer(command,response); 
			outputStream.flush();
			outputStream.close();
		}catch(Exception e ){
			e.printStackTrace();
		}finally{
			outputStream.close();
		}
		
		return offsetresp;
	} 
	
	public String generateCVV_Values( String CHN, String expirydate, String ServiceCode,  HSMParameter hsmobj,  DataInputStream in, DataOutputStream out ) throws Exception {
		String cvv_value = null;
		ByteArrayOutputStream outputStream = new ByteArrayOutputStream( ); 
		EHsm ehsm = new EHsm();  
		
		String CVK = "";
		if(hsmobj.DESLENGTH.equals("2"))
		{
			CVK = hsmobj.CVVK1;
		}
		else
		{
			
			CVK = hsmobj.CVVK1 + hsmobj.CVVK2;  
			trace(" Check CVK"+CVK);
			
		}
		trace("CVK:::::"+hsmobj.CVVK1+"::::::::"+ hsmobj.CVVK2 + "DESLENGTH::"+hsmobj.DESLENGTH);   
		   
		//String CVK = "04";  
		String Message = "";  
		try{
			outputStream = ehsm.eracom_out( "01", 2, "length1", 1, outputStream );
			outputStream = ehsm.eracom_out( "01", 2, "length2", 1, outputStream ); 
			outputStream =  ehsm.eracom_out( "0001", 4, "length3", 1, outputStream );    
			
			String val="";	
			int msglen = CVK.length();
			
			if(hsmobj.DESLENGTH.equals("2"))
			{
			 val = "0017";
			}
			else if(hsmobj.DESLENGTH.equals("16"))
			{
				 val = "001E";
			}
			else if(hsmobj.DESLENGTH.equals("32"))
			{
				 val = "0026";
			}
			else if(hsmobj.DESLENGTH.equals("48"))
			{
				 val = "002E";
			}
			else     
			{
				 val = "0017";
			}
				
			outputStream.write(  ehsm.ascii_to_bcd( val, 2 ) ); 
			ehsm.ComposeCVV(CVK, CHN, expirydate, ServiceCode, outputStream);  
			ehsm.converttoString( Message ); 
			trace("----request begin------");
			trace( new String ( Hex.encodeHex( outputStream.toByteArray() ) ) );
			trace("----request end ------"); 
			
			ByteArrayOutputStream bout = new ByteArrayOutputStream(); 
			String cvvmsg= new String ( Hex.encodeHex( outputStream.toByteArray() ) ); 
			   
			   
			//cvvmsg= new String("010100010017ee08020002010463767620000600001360718999000000");
								  
			         
			           
			trace("Sending : " + cvvmsg ); 
			System.out.println("sending next"+EHsm.ascii_to_bcd( cvvmsg, cvvmsg.length()/2 ));
			System.out.println("cvvmsg"+cvvmsg );
			System.out.println("cvvmsg.length()/2---"+cvvmsg.length()/2);  
			
			
			bout.write( EHsm.ascii_to_bcd( cvvmsg, cvvmsg.length()/2 ) ) ;
			
			
			
			System.out.println("sending msg to hsm 11");  
			
			out.write( bout.toByteArray() );
			
			System.out.println("sending msg to hsm 222");  

			out.flush();
			
			System.out.println("waiting for read"); 
			  
			byte[] response = new byte[16]; 
			
			System.out.println("response----"+response);  
			
		   in.read(response);		
			trace("----response begin ------");
			trace( new String ( Hex.encodeHex( response)  ) );
			trace("----response end------");
			
			String rsp = new String ( Hex.encodeHex( response)  ); 
			cvv_value = ehsm.getCVVResponse(rsp);
			bout.flush();
			outputStream.flush();  
			trace("cvv_value :" + cvv_value);
		}catch(Exception e ){
			trace("Exception while generating cvv..." + e.getMessage());
			e.printStackTrace();
		}finally{
			outputStream.close(); 
		}
		return cvv_value;
		
	}
	
	public String hexa(int num) {
	  /*  int m = 0;
	    if( (m = num >>> 4) != 0 ) {
	        hexa( m );
	    }
	    return (char)((m=num & 0x0F)+(m<10 ? 48 : 55));*/
		
		return Integer.toHexString( num );
	}
	
	
	
 
	
	public String pinVerifiCationInit( String CHN, String pinoffset, String pinblock, String ppk, String EPVK,  DataInputStream in, DataOutputStream out ) throws Exception {
		EHsm ehsm = new EHsm();
		ByteArrayOutputStream outputStream  = new ByteArrayOutputStream();   
		String pinverified = null;
		int acctblockdigits = 12;
		String command = "EE0603";
		
		try{
			System.out.println("Pin Verification...."); 
			//EPVK = "DD818BECE2AC2B09DD818BECE2AC2B09CBA23E21D63C652D";
			//CHN = "4660421004230075";
			//pinblock = "A8DAAFD21B5F6DFE";
			//ppk = "BC6A9B4080CD5F58020DCF33D1121F22";
			//pinoffset = "852900000000";
			String acctblock = CHN.substring(CHN.length()-(acctblockdigits+1), CHN.length() );
			acctblock = acctblock.substring(0, acctblock.length()-1);
			outputStream  = ehsm.pinVerifiCationSafeNet( command, EPVK, CHN, pinblock, ppk, pinoffset, acctblock,  outputStream);
			pinverified  = this.sendToHSMForPrintPin(outputStream, ehsm, out, in);
			System.out.println("result : " + pinverified  );
			trace("Verification result : " + pinverified  );
			this.deComposePinMailer(command,pinverified);
			
		}catch(Exception e ){
			e.printStackTrace();
			trace("Exception : " + e);
		}finally{
			if( outputStream != null ){ outputStream.close(); }
			ehsm = null;
		}
		return pinverified ;
	}
	
	
	
	public String generateSessionKey(  DataInputStream in, DataOutputStream out  ) throws Exception {
		String command = "EE0400";
		EHsm ehsm = new EHsm(); 
		ByteArrayOutputStream outputStream  = null;
		JSONObject jsonkeys = new JSONObject();
		try{
			outputStream = new ByteArrayOutputStream();
			String TMK = "66A35E1B43C02C2E66A35E1B43C02C2E";
			outputStream = ehsm.generateSessionkeyMessage(command, TMK, outputStream);
			
			String sessionkeymsg = this.sendToHSMForPrintPin(outputStream, ehsm, out, in);
			System.out.println("Session key from hsm : " + sessionkeymsg );
			trace("Session key from hsm : " + sessionkeymsg);
			//this.deComposePinMailer(command,sessionkey);
			this.decomposeKeys(command, sessionkeymsg, jsonkeys);
			trace("jsonkeys :" + jsonkeys );
		}catch(Exception e){
			e.printStackTrace();
			trace("Exception while generating session key : " + e);
			return null;
		}
		finally{
			if( outputStream != null ){ outputStream.close(); }
			ehsm = null;
		}
		
		
		
		return "JOHNPRITTO";
		
	}
	
	
	
	public static void main( String args[] ) throws Exception {
		HsmTcpIp tcp = new HsmTcpIp();
		String hsmip = "192.168.15.17";
		int hsmport = 4500;
		DataInputStream in = null;
		DataOutputStream out  = null;
		System.out.println("Opening  connection....");
		Socket connect_id = tcp.connectingHSM(hsmip, hsmport, 10000);
		if ( connect_id != null ) {				
			in= new DataInputStream (new BufferedInputStream(connect_id.getInputStream()));
			out = new DataOutputStream (new BufferedOutputStream(connect_id.getOutputStream()));  
		}else{				 
			System.out.println("Could not connect hsm"); 
		} 
		System.out.println("testing");
		try{
			EHsm ehsm = new EHsm(); 
			/*System.out.println("Pin Verification...."); 
			ByteArrayOutputStream outputStream  = new ByteArrayOutputStream();   
			String EPVK = "DD818BECE2AC2B09DD818BECE2AC2B09CBA23E21D63C652D";
			String CHN = "4660421004230075";
			String pinblock = "A8DAAFD21B5F6DFE";
			String ppk = "BC6A9B4080CD5F58020DCF33D1121F22";
			String pinoffset = "852900000000";
			String acctblock = "042100423007";
			outputStream  = ehsm.pinVerifiCationSafeNet( EPVK, CHN, pinblock, ppk, pinoffset, acctblock, connect_id, outputStream);
			tcp.sendToHSMForPrintPin(outputStream, ehsm, out, in);
			 */
			
			
			/*HsmTcpIp tcp = new HsmTcpIp();
			
			String CHN="4660421004230075" ;
			String expirydate="1601";
			String ServiceCode="901";
			
			tcp.generateCVV(CHN,expirydate,ServiceCode,"192.168.15.212", 9000);
			for ( int i=0;i<=10; i++ ){
				trace("Printin...."+i+ " Pin");
			//	tcp.printPin( "192.168.15.212", 9000  );
			}
			//tcp.generateCVV( "192.168.15.212", 9000 );
			trace ( tcp.hexa( 61 ) ) ;
			
			
			 trace( "ascii to bcd " +  EHsm.ascii_to_bcd( "3d" , 1 ) ); 
			 
			 tcp.deComposePinMailer("");*/
			 
		}catch(Exception e ){
			//e.printStacktrace();
		}finally{
			connect_id.close();
			System.out.println("Connection closed....");
		}
	} 
}
